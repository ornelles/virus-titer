% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nucMask.R
\name{nucMask}
\alias{nucMask}
\title{Generate Nuclear Mask from DNA Image}
\usage{
nucMask(dna, width = 36, offset = 0.05, size = 2, sigma = 2,
  radius = 2 * ceiling(3 * sigma) + 1, gamma = 1)
}
\arguments{
\item{dna}{Fluorescent DNA image \emph{or} character vector representing
path(s) to DNA image file(s).}

\item{width}{Largest nuclear width (diameter) used as width parameter
for \code{thresh2}.}

\item{offset}{Offset parameter for \code{thresh2}. Use default of 0.05
for typical images, 0.01 for low contrast images.}

\item{size}{Radius for \code{medianFilter}, integer. Use 2 for routine
images, 0 to skip \code{medianFilter}.}

\item{sigma}{Standard deviation for \code{gblur}, 2 for routine,
5 for finely detailed.}

\item{radius}{Radius for code{gblur}, default of 2 * ceiling(3 * sigma)
+ 1 for typical imagers, numbers smaller than default of 13 for
smaller features.}

\item{gamma}{Exponent for \code{DNA^gamma} transformation.}
}
\value{
A single object holding an integer Image mask for each DNA image.
}
\description{
Generate and return an integer Image mask from a fluorescent DNA image
such as one obtained by DAPI staining.
}
\details{
Generate an integer object mask representing segmented nuclei. The
argument can be either a monochrome nuclear fluorescent image of one
or more dimensions or a character vector of path(s) to such images.

Optimal conditions may need to be found by empirically adjusting the
arguments, especially \code{width} and \code{offset}.

The image or images will be processed sequentially by (1) gamma
transformation, (2) normalization, (3) \code{medianFilter()} with
\code{size} (if non-zero), (4) \code{gblur()} with \code{sigma} and 
\code{radius}, (5) \code{thresh2()} with \code{width} and \code{offset},
(6) \code{fillHull()}, (7) \code{distmap()} and (8) \code{watershed()}.
}
\examples{
xm <- nucMask(system.file("extdata", "by_folder/b2/file001.tif", package = "virustiter"))
max(xm) # total number of nuclei
plot(colorLabels(xm))

}
